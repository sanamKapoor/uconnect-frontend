{"version":3,"sources":["redux/types/authTypes.js","redux/types/userTypes.js","redux/types/modalTypes.js","redux/actions/authActions.js","Layout/components/Common/UIElements/Loading.js","redux/reducers/modalReducer.js","redux/reducers/postReducer.js","redux/reducers/userReducer.js","redux/reducers/authReducer.js","redux/reducers/index.js","redux/store.js","Layout/components/Common/MobileNavigation.js","App.js","serviceWorker.js","index.js","redux/types/postTypes.js"],"names":["AUTH_LOADING","AUTH_ERROR","AUTH_SUCCESS","AUTH_USER","GET_USERS","GET_USER","USER_LOADING","USER_ERRORS","USER_SUCCESS_MSG","UPDATE_USER","UPDATE_OTHER_USER","MODAL_LOADING","MODAL_ERROR","MODAL_SUCCESS","SHOW_SUCCESS_TOAST","SHOW_ERROR_TOAST","authLoading","loading","type","Action","payload","authSuccessMsg","msg","authErrorMsg","err","setCurrentUser","userId","isLoggedIn","logOutUser","dispatch","localStorage","clear","authEndPoint","url","method","body","headers","fetch","process","res","json","data","ok","Error","message","token","setItem","decoded","jwt_decode","exp","iat","Loading","className","role","initialState","modalLoading","modalErrorMsg","modalSuccessMsg","showSuccessToast","showErrorToast","posts","post","postLoading","postError","profilePostErr","profilePostSuccessMsg","postSuccessMsg","fetchProfilePosts","fetchPostAgain","updateAllPosts","allPosts","updatedPosts","updatedPostIndex","findIndex","p","_id","reducer","state","action","users","user","userLoading","userError","userSuccessMsg","updateUserFromUsersArray","updatedUsers","updatedUserIndex","u","userErrorMsg","authSuccess","authError","combineReducers","postReducer","userReducer","modal","Actions","auth","middleware","thunk","store","createStore","compose","applyMiddleware","MobileNavigation","useSelector","to","HomePage","React","lazy","ProfilePage","CreatePost","SearchUsers","AccountVerify","Welcome","Login","SignUp","ResetPassword","App","useDispatch","useState","routes","setRoutes","useEffect","timmer","setInterval","jwtToken","remainTimer","getItem","window","location","href","clearInterval","exact","path","component","fallback","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","origin","addEventListener","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","GET_POSTS","GET_POST","POST_LOADING","POST_ERRORS","PROFILE_POST_ERROR","PROFILE_POST_SUCCESS_MSG","POST_SUCCESS_MSG","UPDATE_POST","UPDATE_PROFILE_POST","FETCH_PROFILE_POSTS","FETCH_POST_AGAIN"],"mappings":"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","file":"static/js/main.0bf11e69.chunk.js","sourcesContent":["export const AUTH_LOADING = 'AUTH_LOADING';\r\nexport const AUTH_ERROR = 'AUTH_ERROR';\r\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\r\nexport const AUTH_USER = 'AUTH_USER';","export const GET_USERS = 'GET_USERS';\r\nexport const GET_USER = 'GET_USER';\r\nexport const USER_LOADING = 'USER_LOADING';\r\nexport const USER_ERRORS = 'USER_ERRORS';\r\nexport const USER_SUCCESS_MSG = 'USER_SUCCESS_MSG';\r\nexport const UPDATE_USER = 'UPDATE_USER';\r\nexport const UPDATE_OTHER_USER = 'UPDATE_OTHER_USER'; ","export const MODAL_LOADING = 'MODAL_LOADING';\r\nexport const MODAL_ERROR = 'MODAL_ERROR';\r\nexport const MODAL_SUCCESS = 'MODAL_SUCCESS';\r\nexport const SHOW_SUCCESS_TOAST = 'SHOW_SUCCESS_TOAST';\r\nexport const SHOW_ERROR_TOAST = 'SHOW_ERROR_TOAST';","import * as Action from '../types/authTypes';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nexport const authLoading = loading => {\r\n    return {\r\n        type: Action.AUTH_LOADING,\r\n        payload: loading\r\n    }\r\n}\r\n\r\nexport const authSuccessMsg = msg => {\r\n    return {\r\n        type: Action.AUTH_SUCCESS,\r\n        payload: msg\r\n    }\r\n}\r\n\r\nexport const authErrorMsg = err => {\r\n    return {\r\n        type: Action.AUTH_ERROR,\r\n        payload: err\r\n    }\r\n}\r\n\r\nexport const setCurrentUser = (userId, isLoggedIn) => {\r\n    return {\r\n        type: Action.AUTH_USER,\r\n        userId: userId,\r\n        isLoggedIn: isLoggedIn\r\n    }\r\n}\r\n\r\nexport const logOutUser = () => dispatch => {\r\n    localStorage.clear();\r\n    dispatch(setCurrentUser(null, false))\r\n}\r\n\r\nexport const authEndPoint = (url, method = 'GET', body, headers) => async dispatch => {\r\n    dispatch(authLoading(true))\r\n\r\n    try {\r\n        const res = await fetch(process.env.REACT_APP_BACKEND_URL + url, {\r\n            method,\r\n            body, \r\n            headers\r\n        })\r\n        const data = await res.json();\r\n\r\n        if(!res.ok){\r\n            throw new Error(data.message)\r\n        }\r\n\r\n        dispatch(authLoading(false));\r\n        dispatch(authSuccessMsg(data.msg))\r\n\r\n        if(data.token){\r\n          const { token } = data;\r\n          localStorage.setItem('jwtToken', token);\r\n          const decoded = jwt_decode(token);\r\n          localStorage.setItem('expTime', decoded.exp - decoded.iat)\r\n          dispatch(setCurrentUser(decoded.userId, true));\r\n        }\r\n    } catch (error) {\r\n        dispatch(authLoading(false))\r\n        error.message ? dispatch(authErrorMsg(error.message)) : dispatch(authErrorMsg(error))\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nfunction Loading() {\r\n    return (\r\n        <div className=\"spinner-border text-secondary\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading\r\n","import * as Actions from '../types/modalTypes';\r\n\r\nconst initialState = {\r\n    modalLoading: false,\r\n    modalErrorMsg: '',\r\n    modalSuccessMsg: '',\r\n    showSuccessToast: true,\r\n    showErrorToast: true\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type){\r\n        case Actions.MODAL_LOADING:\r\n            return {\r\n                ...state,\r\n                modalLoading: action.payload,\r\n            }\r\n        case Actions.MODAL_ERROR:\r\n            return {\r\n                ...state,\r\n                modalLoading: false,\r\n                modalErrorMsg: action.payload,\r\n                modalSuccessMsg: ''\r\n            }\r\n        case Actions.MODAL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                modalLoading: false,\r\n                modalErrorMsg: '',\r\n                modalSuccessMsg: action.payload\r\n            }\r\n        case Actions.SHOW_ERROR_TOAST:\r\n            return {\r\n                ...state,\r\n                showErrorToast: action.payload\r\n            }\r\n        case Actions.SHOW_SUCCESS_TOAST:\r\n            return {\r\n                ...state,\r\n                showSuccessToast: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import * as Action from '../types/postTypes';\r\n\r\nconst initialState = {\r\n    posts: [],\r\n    post: {},\r\n    postLoading: false,\r\n    postError: '',\r\n    profilePostErr: '',\r\n    profilePostSuccessMsg: '',\r\n    postSuccessMsg: '',\r\n    fetchProfilePosts: [],\r\n    fetchPostAgain: false\r\n}\r\n\r\nconst updateAllPosts = (allPosts, post) => {\r\n    const updatedPosts = [...allPosts];\r\n    const updatedPostIndex = updatedPosts.findIndex(p => p._id === post._id);\r\n    if (updatedPostIndex > -1) {\r\n        updatedPosts[updatedPostIndex] = post;\r\n    }\r\n\r\n    return updatedPosts\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case Action.POST_LOADING:\r\n            return {\r\n                ...state,\r\n                postLoading: action.payload,\r\n            }\r\n        case Action.POST_ERRORS:\r\n            return {\r\n                ...state,\r\n                postError: action.payload\r\n            }\r\n        case Action.PROFILE_POST_ERROR:\r\n            return {\r\n                ...state,\r\n                profilePostErr: action.payload, \r\n                fetchProfilePosts: []\r\n            }\r\n        case Action.GET_POST:\r\n            return {\r\n                ...state,\r\n                post: action.payload,\r\n                postError: ''\r\n            }\r\n        case Action.GET_POSTS:\r\n            return {\r\n                ...state,\r\n                posts: action.payload,\r\n                postError: ''\r\n            }\r\n        case Action.POST_SUCCESS_MSG:\r\n            return {\r\n                ...state,\r\n                postSuccessMsg: action.payload\r\n            }\r\n        case Action.PROFILE_POST_SUCCESS_MSG:\r\n            return {\r\n                ...state,\r\n                profilePostSuccessMsg: action.payload\r\n            }\r\n        case Action.UPDATE_POST:\r\n            return{\r\n                ...state,\r\n                posts: updateAllPosts(state.posts, action.payload)\r\n            }\r\n        case Action.UPDATE_PROFILE_POST:\r\n            return {\r\n                ...state,\r\n                fetchProfilePosts: updateAllPosts(state.fetchProfilePosts, action.payload)\r\n            }\r\n        case Action.FETCH_PROFILE_POSTS:\r\n            return {\r\n                ...state,\r\n                fetchProfilePosts: action.payload,\r\n                profilePostErr: ''\r\n            }\r\n        case Action.FETCH_POST_AGAIN:\r\n            return {\r\n                ...state,\r\n                fetchPostAgain: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer;","import * as Action from '../types/userTypes';\r\n\r\nconst initialState = {\r\n    users: [],\r\n    user: {},\r\n    userLoading: false,\r\n    userError: '',\r\n    userSuccessMsg: ''\r\n}\r\n\r\nconst updateUserFromUsersArray = (users, user) => {\r\n    const updatedUsers = [...users];\r\n    const updatedUserIndex = updatedUsers.findIndex(u => u._id === user._id);\r\n    if (updatedUserIndex > -1) {\r\n        updatedUsers[updatedUserIndex] = user;\r\n    }\r\n\r\n    return updatedUsers\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case Action.USER_LOADING:\r\n            return {\r\n                ...state,\r\n                userLoading: action.payload,\r\n            }\r\n        case Action.USER_ERRORS:\r\n            return {\r\n                ...state,\r\n                userErrorMsg: action.payload\r\n            }\r\n        case Action.GET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.payload,\r\n                userError: ''\r\n            }\r\n        case Action.GET_USER:\r\n            return {\r\n                ...state,\r\n                user: action.payload,\r\n                userError: ''\r\n            }\r\n        case Action.USER_SUCCESS_MSG:\r\n            return {\r\n                ...state,\r\n                userSuccessMsg: action.payload\r\n            }\r\n        case Action.UPDATE_USER:\r\n            return {\r\n                ...state,\r\n                user: action.payload\r\n            }\r\n        case Action.UPDATE_OTHER_USER:\r\n            return {\r\n                ...state,\r\n                users: updateUserFromUsersArray(state.users, action.payload)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer;","import * as Action from '../types/authTypes';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false, \r\n    userId: null,\r\n    loading: false,\r\n    authSuccess: '',\r\n    authError: ''\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type){\r\n        case Action.AUTH_LOADING: \r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                authSuccess: '',\r\n                authError: ''\r\n            }\r\n        case Action.AUTH_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                authSuccess: action.payload,\r\n                authError: ''\r\n            }\r\n        case Action.AUTH_ERROR:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                authError: action.payload,\r\n                authSuccess: ''\r\n            }\r\n        case Action.AUTH_USER:\r\n            return {\r\n                ...state,\r\n                userId: action.userId,\r\n                isLoggedIn: action.isLoggedIn\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport modalReducer from './modalReducer';\r\nimport postReducer from './postReducer';\r\nimport userReducer from './userReducer';\r\nimport authReducer from './authReducer';\r\n\r\nconst reducer = combineReducers({\r\n    post: postReducer,\r\n    user: userReducer,\r\n    modal : modalReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport default reducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './reducers/index';\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(reducer, compose(\r\n    applyMiddleware(...middleware)\r\n))\r\n\r\nexport default store;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction MobileNavigation() {\r\n\r\n    const { userId } = useSelector(state => state.auth)\r\n\r\n    return (\r\n        <main className=\"d-block d-lg-none shadow-lg\">\r\n            <div className=\"row text-center py-2\">\r\n            <div className=\"col\">\r\n                <NavLink to=\"/\">\r\n                    <i className=\"fas fa-home fa-1x text-dark\"></i>        \r\n                </NavLink>\r\n            </div>\r\n            <div className=\"col\">\r\n                <NavLink to=\"/search\">\r\n                    <i className=\"fas fa-search fa-1x text-dark\"></i>\r\n                </NavLink>\r\n            </div>\r\n            <div className=\"col\">\r\n                <NavLink to=\"/post\">\r\n                    <i className=\"fas fa-upload fa-1x text-dark\"></i>        \r\n                </NavLink>\r\n            </div>\r\n            <div className=\"col\">\r\n                <NavLink to={`/profile/${userId}`}>\r\n                    <i className=\"fas fa-user fa-1x text-dark\"></i>\r\n                </NavLink>\r\n            </div>\r\n            </div>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default MobileNavigation\r\n","import React, { useEffect, useState, Suspense } from 'react';\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport jwt_decode from 'jwt-decode';\n\nimport MobileNaviation from './Layout/components/Common/MobileNavigation';\nimport Loading from './Layout/components/Common/UIElements/Loading';\nimport { setCurrentUser, logOutUser } from './redux/actions/authActions';\n\nconst HomePage = React.lazy(() => import('./Layout/Pages/HomePage'))\nconst ProfilePage = React.lazy(() => import('./Layout/Pages/ProfilePage'))\nconst CreatePost = React.lazy(() => import('./Layout/Pages/CreatePost'))\nconst SearchUsers = React.lazy(() => import('./Layout/Pages/SearchUsers'))\nconst AccountVerify = React.lazy(() => import('./Layout/Pages/AccountVerify'))\nconst Welcome = React.lazy(() => import('./Layout/Pages/Welcome'))\nconst Login = React.lazy(() => import('./Layout/Pages/Login'))\nconst SignUp = React.lazy(() => import('./Layout/Pages/SignUp'))\nconst ResetPassword = React.lazy(() => import('./Layout/Pages/ResetPassword'))\n\nconst App = () => {\n\n  const dispatch = useDispatch();\n  const { isLoggedIn, userId, authError } = useSelector(state => state.auth);\n  const { postError } = useSelector(state => state.post)\n  const { userError } = useSelector(state => state.user)\n  const { modalErrorMsg } = useSelector(state => state.modal)\n  const [routes, setRoutes] = useState('');\n\n  useEffect(() => {\n\n    const timmer = setInterval(() => {\n\n    //      Check for token\n    if(localStorage.jwtToken){\n    \n      const decoded = jwt_decode(localStorage.jwtToken);\n      //     Set user and isAuth\n      let user = decoded.userId;\n      userId === null && dispatch(setCurrentUser(user, true));\n\n      //      Check for expire token\n      const remainTimer = localStorage.getItem('expTime') - 1;\n      localStorage.setItem('expTime', remainTimer);\n\n      if(remainTimer <= 0){\n        dispatch(logOutUser());\n        window.location.href = '/welcome';\n      }\n    }\n  }, 1000)\n\n  return () => {\n    clearInterval(timmer);\n  }\n})\n\n  useEffect(() => {\n    if(\n        authError === 'Unexpected token U in JSON at position 0' ||\n        modalErrorMsg === 'Unexpected token U in JSON at position 0' ||\n        postError === 'Unexpected token U in JSON at position 0' ||\n        userError === 'Unexpected token U in JSON at position 0'\n      ) {\n        dispatch(logOutUser());\n        window.location.href = '/welcome';\n      }\n  }, [dispatch, authError, modalErrorMsg, postError, userError])\n\n  useEffect(() => {\n    if(!localStorage.jwtToken){\n      setRoutes(\n        <Switch>\n          <Route exact path=\"/welcome\" component={Welcome} />\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path=\"/signup\" component={SignUp} />\n          <Route path='/authentication/active/:token' component={AccountVerify} />\n          <Route path='/resetPassword/:token?' component={ResetPassword} />\n          <Redirect to=\"/welcome\" />\n        </Switch>\n      )\n    } else {\n      setRoutes(\n        <>\n        <MobileNaviation />\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route exact path=\"/profile/:id\" component={ProfilePage} />\n          <Route exact path=\"/search\" component={SearchUsers} />\n          <Route exact path=\"/post\" component={CreatePost} />\n          <Redirect to=\"/\" />\n        </Switch>\n        </>\n      )\n    }\n\n  }, [isLoggedIn, userId])\n\n  return (\n      <Router>\n        <Suspense fallback={<div className=\"vw-100 vh-100 d-flex justify-content-center align-items-center\"><Loading /></div>}>\n          {\n            routes ? routes : <div className=\"vw-100 vh-100 d-flex justify-content-center align-items-center\"><Loading /></div>\n          }\n        </Suspense>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","export const GET_POSTS = 'GET_POSTS';\r\nexport const GET_POST = 'GET_POST';\r\nexport const POST_LOADING = 'POST_LOADING';\r\nexport const POST_ERRORS = 'POST_ERRORS';\r\nexport const PROFILE_POST_ERROR = 'PROFILE_POST_ERROR';\r\nexport const PROFILE_POST_SUCCESS_MSG = 'PROFILE_POST_SUCCESS_MSG';\r\nexport const POST_SUCCESS_MSG = 'POST_SUCCESS_MSG';\r\nexport const UPDATE_POST = 'UPDATE_POST';\r\nexport const UPDATE_PROFILE_POST = 'UPDATE_PROFILE_POST';\r\nexport const FETCH_PROFILE_POSTS = 'FETCH_PROFILE_POSTS';\r\nexport const FETCH_POST_AGAIN = 'FETCH_POST_AGAIN';"],"sourceRoot":""}